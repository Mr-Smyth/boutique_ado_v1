"""
Django settings for boutiqu_ado project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
# setting debug to true only if there is a development in the enviroment
DEBUG = 'DEVELOPMENT' in os.environ

# add the hostname of our Heroku app to allowed hosts in settings.py
# add localhost in here so that gitpod will still work too.
ALLOWED_HOSTS = ['mr-smyth-boutique-ado.herokuapp.com', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'home',
    'products',
    'bag',
    'checkout',
    'profiles',

    # Other
    'crispy_forms',
    'storages',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'boutiqu_ado.urls'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                # Required by allauth
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                # our context shopping bag file
                'bag.contexts.bag_contents',
            ],
            # allow crispy form tags in all templates
            'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field',
            ]
        },
    },
]

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'boutiqu_ado.wsgi.application'

SITE_ID = 1

# To send confirmation emails we need to temporarily log those email of new users
# to the console so we can get the confirmation links
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Additional settings relating to Signing up

# TELL ALLAUTH WHICH METHOD OF AUTHENTICATION USERNAME OR EMAIL
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
# Next 3 settings refer to entering email on signup
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
# required min length of username
ACCOUNT_USERNAME_MIN_LENGTH = 4
# specify a login URL
LOGIN_URL = '/accounts/login/'
# Specify a URL to return to after logging in
LOGIN_REDIRECT_URL = '/'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# if database is running on heroku - where environ will be defined
# use this (postgres)
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        # use dj_database_url to get the value of the Database Url
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }
# Otherwise we are local - So use this(sqlLite):
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# link up our static files
# this needs to be a tuple
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = '/media/'
# THIS IS WHERE ALL MEDIA FILES WILL GO
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# AWS LINK SETTINGS
# WE ONLY WANT TO USE AWS IF WE ARE ON HEROKU - SO WE IF
if 'USE_AWS' in os.environ:

    # Cache control
    AWS_S3_OBJECT_PARAMETERS = {
        'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
        'CacheControl': 'max-age=94608000',
    }

    # --- Bucket Config
    AWS_STORAGE_BUCKET_NAME = 'mr-smyth-boutique-ado'
    AWS_S3_REGION_NAME = 'eu-west-2'
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    # tell django where our image files will be coming from in production
    # it will be our bucket name(above) followed by .s3.amazonaws.com'
    # this will use an f string to generate a url
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

    # --- Static and media files
    # Tell it that for static file storage we want to use our storage class we
    # just created
    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    # And that the location it should save static files is a folder called
    # static.
    STATICFILES_LOCATION = 'static'
    # And then do the same thing for media files by using the default file
    # storage, and media files location settings.
    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
    # And that the location it should save static files is a folder called
    # media.
    MEDIAFILES_LOCATION = 'media'

    # We also need to override and explicitly set the URLs for static and
    # media files, using our custom domain and the new locations.
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'

# Stripe
FREE_DELIVERY_THRESHOLD = 50
STANDARD_DELIVERY_PERCENTAGE = 10
# for the moment we make currency usd
STRIPE_CURRENCY = 'usd'
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY', '')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_WH_SECRET = os.getenv('STRIPE_WH_SECRET', '')
DEFAULT_FROM_EMAIL = 'boutiqueado@example.com'
